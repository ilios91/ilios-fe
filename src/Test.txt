return (
    <div className="h-[100vh] max-h-[100vh] w-full bg-white flex items-center justify-center">
      <div className="max-w-[518px] w-[518px] max-h-[664px] bg-[#EDF3FC] border-[1px] rounded-lg">
        <header className="mt-8 border-b-[1px] border-[#BABABA] pb-2"> 
          <h2 className="font-bold text-[28px] w-[80%] mx-auto">Add Document</h2>
        </header>

        <div className="w-[80%] mt-9 mx-auto">
          <form onSubmit={handleSubmit }>
            <label htmlFor="title" className="font-medium text-sm text-[#171717]">Title</label>
            <input onChange={handleTitleChange} className="h-10 w-full border-none outline-none px-2 text-xs" type="text" placeholder="PCN license" />

            <label htmlFor='license' className="cursor-pointer flex flex-col items-center justify-center mt-12 w-full h-[200px] border-[#BABABA] border-2 border-dotted text-xs text-center">
              <UploadIcon size="lg" />
              <p className='flex flex-col gap-y-1 mt-6'>
                <span>Drag and Drop here</span>
                <span>or</span>
                <span className='text-blue-normal'>
                  Browse file
                  <input onChange={uploadLicense} name='license' accept=".doc,.pdf,.docx" className='hidden cursor-pointer' id='license' type="file" />
                </span>
              </p>
            </label>

            <p className="mt-2 text-xs text-[#6E6E6E]">Accepted file type:- Doc or Pdf</p>
            <button className='w-full h-10 rounded-lg my-10 bg-blue-normal text-white text-sm font-bold' disabled={false}>Upload</button>

            {/* <Button className='w-full h-10 rounded-lg my-10 bg-blue-normal text-white text-sm font-bold' text='Upload' disabled={false}/> */}
          </form>
        </div>
      </div>
    </div>
  );


src/
├── app/
│   ├── (auth)/
│   │   ├── login/
│   │   ├── register/
│   │   └── forgot-password/
│   ├── (dashboard)/
│   │   ├── supplier/
│   │   │   ├── page.tsx
│   │   │   ├── inventory/
│   │   │   ├── orders/
│   │   │   └── analytics/
│   │   └── facility/
│   │       ├── page.tsx
│   │       ├── orders/
│   │       ├── suppliers/
│   │       └── reports/
│   └── page.tsx
├── components/
│   ├── common/
│   │   ├── Button/
│   │   ├── Input/
│   │   ├── Table/
│   │   └── Modal/
│   ├── supplier/
│   │   ├── InventoryCard/
│   │   ├── OrdersList/
│   │   └── Dashboard/
│   └── facility/
│       ├── OrderForm/
│       ├── SuppliersList/
│       └── Dashboard/
├── hooks/
│   ├── useAuth.ts
│   ├── useOrders.ts
│   └── useInventory.ts
├── lib/
│   ├── types/
│   ├── utils/
│   └── constants/
├── services/
│   ├── auth/
│   ├── orders/
│   └── inventory/
└── styles/
    ├── globals.css
    └── components/


// 1. App Directory (Routes)
app/
  (auth)/ // Group for authentication routes
    login/
    register/
    forgot-password/
  
  (dashboard)/ // Group for dashboard routes
    supplier/ // Supplier specific routes
    facility/ // Healthcare facility specific routes

// 2. Components
components/
  common/ // Shared components
    Button/
      index.tsx
      Button.types.ts
      Button.test.tsx
  
  supplier/ // Supplier specific components
    InventoryCard/
      index.tsx
      InventoryCard.types.ts
  
  facility/ // Facility specific components
    OrderForm/
      index.tsx
      OrderForm.types.ts

// 3. Example component structure
components/common/Button/index.tsx:


// 1. App Directory (Routes)
app/
  (auth)/ // Group for authentication routes
    login/
    register/
    forgot-password/
  
  (dashboard)/ // Group for dashboard routes
    supplier/ // Supplier specific routes
    facility/ // Healthcare facility specific routes

// 2. Components
components/
  common/ // Shared components
    Button/
      index.tsx
      Button.types.ts
      Button.test.tsx
  
  supplier/ // Supplier specific components
    InventoryCard/
      index.tsx
      InventoryCard.types.ts
  
  facility/ // Facility specific components
    OrderForm/
      index.tsx
      OrderForm.types.ts

// 3. Example component structure
components/common/Button/index.tsx:



type ButtonProps = {
  variant: 'primary' | 'secondary';
  size: 'sm' | 'md' | 'lg';
  children: React.ReactNode;
}

export const Button = ({ variant, size, children }: ButtonProps) => {
  return (
    <button className={`btn-${variant} btn-${size}`}>
      {children}
    </button>
  );
};


// app/(dashboard)/layout.tsx
export default function DashboardLayout({ children }: { children: React.ReactNode }) {
  const { user, role } = useAuth();

  if (!user) {
    redirect('/login');
  }

  return (
    <div className="dashboard-layout">
      <Sidebar role={role} />
      <main>{children}</main>
    </div>
  );
}

// app/(dashboard)/supplier/page.tsx
export default function SupplierDashboard() {
  return (
    <div>
      <SupplierStats />
      <InventoryOverview />
      <RecentOrders />
    </div>
  );
}



// lib/types/user.ts
export interface User {
  id: string;
  role: 'supplier' | 'facility';
  name: string;
  email: string;
}

// lib/types/order.ts
export interface Order {
  id: string;
  supplierId: string;
  facilityId: string;
  items: OrderItem[];
  status: 'pending' | 'approved' | 'shipped' | 'delivered';
  createdAt: Date;
}



// Custom Hook

// hooks/useOrders.ts
export const useOrders = (role: 'supplier' | 'facility') => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await fetch(`/api/${role}/orders`);
        const data = await response.json();
        setOrders(data);
      } catch (error) {
        console.error('Error fetching orders:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, [role]);

  return { orders, loading };
};
